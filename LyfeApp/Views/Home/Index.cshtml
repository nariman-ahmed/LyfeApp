@model List<PostModel>

<main id="site__main" class="2xl:ml-[--w-side]  xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">
    <div class="lg:flex 2xl:gap-16 gap-12 max-w-[1065px]" id="js-oversized" style="width: 100% !important; margin-left: 4rem !important; margin-right: auto !important;">
        <div class="flex-1 max-w-none" style="min-width: 0 !important; width: 100% !important; flex-grow: 1 !important;">

            @await Component.InvokeAsync("Stories")

            <div class="w-full mx-auto flex-1 xl:space-y-6 space-y-3" style="width: 100% !important; max-width: none !important;">

                <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1" style="width: 100% !important;">
                    <div class="flex items-center md:gap-3 gap-1">
                        <div class="flex-1 bg-slate-100 hover:bg-opacity-80 transition-all rounded-lg cursor-pointer" uk-toggle="target: #create-status">
                            <div class="py-2.5 text-center">What do you have in mind?</div>
                        </div>
                        <div class="cursor-pointer hover:bg-opacity-80 p-1 px-1.5 rounded-xl transition-all bg-pink-100/60 hover:bg-pink-100" uk-toggle="target: #create-status">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 stroke-pink-600 fill-pink-200/70" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M15 8h.01" />
                                <path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" />
                                <path d="M3.5 15.5l4.5 -4.5c.928 -.893 2.072 -.893 3 0l5 5" />
                                <path d="M14 14l1 -1c.928 -.893 2.072 -.893 3 0l2.5 2.5" />
                            </svg>
                        </div>
                    </div>

                </div>

                <div id="posts-container" class="space-y-4 w-full" style="width: 100% !important;">

                    @if (Model.Count == 0)
                    {
                        <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1 w-full" style="width: 100% !important;">
                            Currently, there are no posts available. Would you like to create the first one?
                        </div>
                    }
                    else
                    {
                        @foreach (var post in Model)
                        {
                            <partial name="Home/_Post" model="post" view-data='new ViewDataDictionary(ViewData)
                            {{ "ShowAllComments", false}}'/>
                        }
                    }

                </div>

            </div>
        </div>
        <div class="flex-1">
            <div class="lg:space-y-4 lg:pb-8 max-lg:grid sm:grid-cols-2 max-lg:gap-6">
                <div class="box p-5 px-6">
                    @await Component.InvokeAsync("SuggestedFriends")
                </div>
                <div class="box p-5 px-6 border1">
                    <partial name="Sidebar/_TrendsForYou" />
                </div>
            </div>
        </div>
    </div>
</main>

<partial name="Modals/_CreateStatus" model="new CreatedPostDto()" />
<partial name="Modals/_CreateStory" model="new CreatedStoryDto()" />
<partial name="Home/_PostDeleteConfirmation" />

<script>
    function openPostDeleteConfirmation(postId) {
        console.log('Function called with postId:', postId);
        
        // Find and hide the specific dropdown that was clicked
        // We need to find the dropdown that's currently open
        const openDropdowns = document.querySelectorAll('.post-options-dropdown[style*="display: block"], .post-options-dropdown.uk-open');
        openDropdowns.forEach(dropdown => {
            dropdown.style.display = 'none';
            dropdown.classList.remove('uk-open');
        });
        
        // Alternative approach: hide all dropdowns to be safe
        const allDropdowns = document.querySelectorAll('.post-options-dropdown');
        allDropdowns.forEach(dropdown => {
            dropdown.style.display = 'none';
            dropdown.classList.remove('uk-open');
        });
        
        // Set the post ID and show the modal
        document.getElementById('deleteConfirmationPostId').value = postId;
        UIkit.modal('#postDeleteDialog').show();
    }

    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('posts-container').addEventListener('click', function () {

            const button = event.target.closest('.like-button, .favorite-button')
            if (button) {
                event.preventDefault();

                var form = button.closest('form');
                var postId = form.querySelector('input[name="PostId"]').value;
                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {}
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }
        });

        document.getElementById('posts-container').addEventListener('submit', function () {
            var form = event.target;

            if (form.classList.contains('add-comment-form')) {
                event.preventDefault();

                var postId = form.querySelector('input[name="PostId"]').value;
                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {}
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));
            }

            if (form.classList.contains('remove-comment-form')) {
                event.preventDefault();

                var postId = form.querySelector('input[name="PostId"]').value;
                var commentId = form.querySelector('input[name="CommentId"]').value;

                var postContainer = document.getElementById('post-' + postId);

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {}
                })
                    .then(response => response.text())
                    .then(html => {
                        postContainer.innerHTML = html;
                    })
                    .catch(error => console.error('Error: ', error));

            }
        })
    })
    
</script>